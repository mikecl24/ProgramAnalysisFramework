%{
open System
open Types
%}

%token <string> VAR
%token <int> NUM
%token <string> OPA
%token <string> OPAU
%token <string> OPBA
%token <string> OPBU
%token <string> OPB
%token EOF
%token ASSIGN SKIP 
%token COMMA TRUE FALSE IF FI THEN ELSE WHILE DO OD LPAR RPAR LBRA RBRA

%left OPA

// start
%start start
%type <Statement list> start

%%

start: command EOF						{$1}

command: 
| command COMMA command					{ $1 @ $3 }
| VAR ASSIGN aexp						{ [{commandAST = AssignCommand($1, $3); s_type = S_VarAssignment}] }
| SKIP									{ [{commandAST = SkipCommand; s_type = S_Skip}] }
| IF bexp THEN command ELSE command	FI	{ [{commandAST = BoolCommand($2); s_type = S_IfBool}] @ $4 @ [{commandAST = BoolCommand(NotExpr($2)); s_type = S_IfElse}] @ $6 @ [{commandAST = SkipCommand; s_type = S_IfFi}] }
| WHILE bexp DO command OD				{ [{commandAST = BoolCommand($2); s_type = S_DoBool}] @ $4 @ [{commandAST = BoolCommand(NotExpr($2)); s_type = S_DoOd}] }
| VAR LBRA aexp RBRA ASSIGN aexp        { [{commandAST = ArrAssignCommand($1, $3, $6); s_type = S_ArrAssignment}] }
 
aexp:
| LPAR aexp RPAR                        { $2 }
| VAR LBRA aexp RBRA                    { ArrExpr($1, $3) }
| VAR									{ VarExpr($1) }
| NUM									{ NumExpr($1) }
| aexp OPA aexp							{ SumExpr($1, $3) }
| aexp OPAU aexp						{ MinExpr($1,$3) }
| OPAU aexp								{ UMinExpr($2) }

bexp:
| LPAR bexp RPAR                        { $2 }
| TRUE									{ TrueExpr }
| FALSE									{ FalseExpr }
| aexp OPBA aexp						{ LargerExpr($1,$3) }
| OPBU bexp								{ NotExpr($2) }
| bexp OPB bexp							{ AndExpr($1,$3) }

%%