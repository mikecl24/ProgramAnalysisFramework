// Implementation file for parser generated by fsyacc
module ExtWParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 ".\ExtWParser.fsp"

open System
open System.Collections.Generic
open Types
let mutable vartemp = new List<Var>()
let mutable arrtemp = new List<Var>()

# 14 ".\ExtWParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | COMMA
  | TRUE
  | FALSE
  | IF
  | FI
  | THEN
  | ELSE
  | WHILE
  | DO
  | OD
  | LPAR
  | RPAR
  | LBRA
  | RBRA
  | GT
  | GTEQ
  | LT
  | LTEQ
  | EQ
  | NEQ
  | ASSIGN
  | SKIP
  | PLUS
  | MULT
  | DIV
  | MINUS
  | AND
  | OR
  | SAND
  | SOR
  | NOT
  | EOF
  | NUM of (int)
  | VAR of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_COMMA
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_IF
    | TOKEN_FI
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_WHILE
    | TOKEN_DO
    | TOKEN_OD
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_LBRA
    | TOKEN_RBRA
    | TOKEN_GT
    | TOKEN_GTEQ
    | TOKEN_LT
    | TOKEN_LTEQ
    | TOKEN_EQ
    | TOKEN_NEQ
    | TOKEN_ASSIGN
    | TOKEN_SKIP
    | TOKEN_PLUS
    | TOKEN_MULT
    | TOKEN_DIV
    | TOKEN_MINUS
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_SAND
    | TOKEN_SOR
    | TOKEN_NOT
    | TOKEN_EOF
    | TOKEN_NUM
    | TOKEN_VAR
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_command
    | NONTERM_aexp
    | NONTERM_bexp

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | COMMA  -> 0 
  | TRUE  -> 1 
  | FALSE  -> 2 
  | IF  -> 3 
  | FI  -> 4 
  | THEN  -> 5 
  | ELSE  -> 6 
  | WHILE  -> 7 
  | DO  -> 8 
  | OD  -> 9 
  | LPAR  -> 10 
  | RPAR  -> 11 
  | LBRA  -> 12 
  | RBRA  -> 13 
  | GT  -> 14 
  | GTEQ  -> 15 
  | LT  -> 16 
  | LTEQ  -> 17 
  | EQ  -> 18 
  | NEQ  -> 19 
  | ASSIGN  -> 20 
  | SKIP  -> 21 
  | PLUS  -> 22 
  | MULT  -> 23 
  | DIV  -> 24 
  | MINUS  -> 25 
  | AND  -> 26 
  | OR  -> 27 
  | SAND  -> 28 
  | SOR  -> 29 
  | NOT  -> 30 
  | EOF  -> 31 
  | NUM _ -> 32 
  | VAR _ -> 33 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_COMMA 
  | 1 -> TOKEN_TRUE 
  | 2 -> TOKEN_FALSE 
  | 3 -> TOKEN_IF 
  | 4 -> TOKEN_FI 
  | 5 -> TOKEN_THEN 
  | 6 -> TOKEN_ELSE 
  | 7 -> TOKEN_WHILE 
  | 8 -> TOKEN_DO 
  | 9 -> TOKEN_OD 
  | 10 -> TOKEN_LPAR 
  | 11 -> TOKEN_RPAR 
  | 12 -> TOKEN_LBRA 
  | 13 -> TOKEN_RBRA 
  | 14 -> TOKEN_GT 
  | 15 -> TOKEN_GTEQ 
  | 16 -> TOKEN_LT 
  | 17 -> TOKEN_LTEQ 
  | 18 -> TOKEN_EQ 
  | 19 -> TOKEN_NEQ 
  | 20 -> TOKEN_ASSIGN 
  | 21 -> TOKEN_SKIP 
  | 22 -> TOKEN_PLUS 
  | 23 -> TOKEN_MULT 
  | 24 -> TOKEN_DIV 
  | 25 -> TOKEN_MINUS 
  | 26 -> TOKEN_AND 
  | 27 -> TOKEN_OR 
  | 28 -> TOKEN_SAND 
  | 29 -> TOKEN_SOR 
  | 30 -> TOKEN_NOT 
  | 31 -> TOKEN_EOF 
  | 32 -> TOKEN_NUM 
  | 33 -> TOKEN_VAR 
  | 36 -> TOKEN_end_of_input
  | 34 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_command 
    | 3 -> NONTERM_command 
    | 4 -> NONTERM_command 
    | 5 -> NONTERM_command 
    | 6 -> NONTERM_command 
    | 7 -> NONTERM_command 
    | 8 -> NONTERM_aexp 
    | 9 -> NONTERM_aexp 
    | 10 -> NONTERM_aexp 
    | 11 -> NONTERM_aexp 
    | 12 -> NONTERM_aexp 
    | 13 -> NONTERM_aexp 
    | 14 -> NONTERM_aexp 
    | 15 -> NONTERM_aexp 
    | 16 -> NONTERM_aexp 
    | 17 -> NONTERM_bexp 
    | 18 -> NONTERM_bexp 
    | 19 -> NONTERM_bexp 
    | 20 -> NONTERM_bexp 
    | 21 -> NONTERM_bexp 
    | 22 -> NONTERM_bexp 
    | 23 -> NONTERM_bexp 
    | 24 -> NONTERM_bexp 
    | 25 -> NONTERM_bexp 
    | 26 -> NONTERM_bexp 
    | 27 -> NONTERM_bexp 
    | 28 -> NONTERM_bexp 
    | 29 -> NONTERM_bexp 
    | 30 -> NONTERM_bexp 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 36 
let _fsyacc_tagOfErrorTerminal = 34

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | COMMA  -> "COMMA" 
  | TRUE  -> "TRUE" 
  | FALSE  -> "FALSE" 
  | IF  -> "IF" 
  | FI  -> "FI" 
  | THEN  -> "THEN" 
  | ELSE  -> "ELSE" 
  | WHILE  -> "WHILE" 
  | DO  -> "DO" 
  | OD  -> "OD" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | LBRA  -> "LBRA" 
  | RBRA  -> "RBRA" 
  | GT  -> "GT" 
  | GTEQ  -> "GTEQ" 
  | LT  -> "LT" 
  | LTEQ  -> "LTEQ" 
  | EQ  -> "EQ" 
  | NEQ  -> "NEQ" 
  | ASSIGN  -> "ASSIGN" 
  | SKIP  -> "SKIP" 
  | PLUS  -> "PLUS" 
  | MULT  -> "MULT" 
  | DIV  -> "DIV" 
  | MINUS  -> "MINUS" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | SAND  -> "SAND" 
  | SOR  -> "SOR" 
  | NOT  -> "NOT" 
  | EOF  -> "EOF" 
  | NUM _ -> "NUM" 
  | VAR _ -> "VAR" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | COMMA  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | FI  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | DO  -> (null : System.Object) 
  | OD  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | LBRA  -> (null : System.Object) 
  | RBRA  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | GTEQ  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | LTEQ  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NEQ  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | SKIP  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MULT  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | SAND  -> (null : System.Object) 
  | SOR  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | NUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | VAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 5us; 65535us; 0us; 2us; 8us; 4us; 15us; 5us; 16us; 6us; 20us; 7us; 24us; 65535us; 10us; 11us; 13us; 42us; 18us; 42us; 22us; 23us; 25us; 26us; 27us; 29us; 28us; 30us; 33us; 34us; 49us; 37us; 50us; 38us; 51us; 39us; 52us; 40us; 53us; 41us; 58us; 43us; 59us; 44us; 60us; 45us; 61us; 46us; 62us; 47us; 63us; 48us; 64us; 42us; 70us; 42us; 71us; 42us; 72us; 42us; 73us; 42us; 8us; 65535us; 13us; 14us; 18us; 19us; 28us; 54us; 64us; 65us; 70us; 66us; 71us; 67us; 72us; 68us; 73us; 69us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 9us; 34us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 2us; 1us; 2us; 1us; 1us; 2us; 2us; 2us; 2us; 2us; 5us; 2us; 2us; 5us; 2us; 2us; 6us; 1us; 2us; 2us; 3us; 7us; 1us; 3us; 5us; 3us; 12us; 13us; 14us; 15us; 1us; 4us; 1us; 5us; 5us; 5us; 27us; 28us; 29us; 30us; 1us; 5us; 1us; 5us; 1us; 5us; 1us; 6us; 5us; 6us; 27us; 28us; 29us; 30us; 1us; 6us; 1us; 6us; 1us; 7us; 5us; 7us; 12us; 13us; 14us; 15us; 1us; 7us; 1us; 7us; 5us; 7us; 12us; 13us; 14us; 15us; 1us; 8us; 2us; 8us; 17us; 5us; 8us; 12us; 13us; 14us; 15us; 11us; 8us; 12us; 13us; 14us; 15us; 20us; 21us; 22us; 23us; 24us; 25us; 1us; 8us; 2us; 9us; 10us; 1us; 9us; 5us; 9us; 12us; 13us; 14us; 15us; 1us; 9us; 1us; 11us; 5us; 12us; 12us; 13us; 14us; 15us; 5us; 12us; 13us; 13us; 14us; 15us; 5us; 12us; 13us; 14us; 14us; 15us; 5us; 12us; 13us; 14us; 15us; 15us; 5us; 12us; 13us; 14us; 15us; 16us; 10us; 12us; 13us; 14us; 15us; 20us; 21us; 22us; 23us; 24us; 25us; 5us; 12us; 13us; 14us; 15us; 20us; 5us; 12us; 13us; 14us; 15us; 21us; 5us; 12us; 13us; 14us; 15us; 22us; 5us; 12us; 13us; 14us; 15us; 23us; 5us; 12us; 13us; 14us; 15us; 24us; 5us; 12us; 13us; 14us; 15us; 25us; 1us; 12us; 1us; 13us; 1us; 14us; 1us; 15us; 1us; 16us; 5us; 17us; 27us; 28us; 29us; 30us; 1us; 17us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 21us; 1us; 22us; 1us; 23us; 1us; 24us; 1us; 25us; 1us; 26us; 5us; 26us; 27us; 28us; 29us; 30us; 5us; 27us; 27us; 28us; 29us; 30us; 5us; 27us; 28us; 28us; 29us; 30us; 5us; 27us; 28us; 29us; 29us; 30us; 5us; 27us; 28us; 29us; 30us; 30us; 1us; 27us; 1us; 28us; 1us; 29us; 1us; 30us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 7us; 9us; 12us; 15us; 18us; 21us; 23us; 26us; 28us; 34us; 36us; 38us; 44us; 46us; 48us; 50us; 52us; 58us; 60us; 62us; 64us; 70us; 72us; 74us; 80us; 82us; 85us; 91us; 103us; 105us; 108us; 110us; 116us; 118us; 120us; 126us; 132us; 138us; 144us; 150us; 161us; 167us; 173us; 179us; 185us; 191us; 197us; 199us; 201us; 203us; 205us; 207us; 213us; 215us; 217us; 219us; 221us; 223us; 225us; 227us; 229us; 231us; 233us; 239us; 245us; 251us; 257us; 263us; 265us; 267us; 269us; |]
let _fsyacc_action_rows = 74
let _fsyacc_actionTableElements = [|4us; 32768us; 3us; 13us; 7us; 18us; 21us; 12us; 33us; 9us; 0us; 49152us; 2us; 32768us; 0us; 8us; 31us; 3us; 0us; 16385us; 1us; 16386us; 0us; 8us; 2us; 32768us; 0us; 8us; 6us; 16us; 2us; 32768us; 0us; 8us; 4us; 17us; 2us; 32768us; 0us; 8us; 9us; 21us; 4us; 32768us; 3us; 13us; 7us; 18us; 21us; 12us; 33us; 9us; 2us; 32768us; 12us; 22us; 20us; 10us; 4us; 32768us; 10us; 27us; 25us; 53us; 32us; 36us; 33us; 32us; 4us; 16387us; 22us; 49us; 23us; 50us; 24us; 51us; 25us; 52us; 0us; 16388us; 7us; 32768us; 1us; 56us; 2us; 57us; 10us; 28us; 25us; 53us; 30us; 64us; 32us; 36us; 33us; 32us; 5us; 32768us; 5us; 15us; 26us; 70us; 27us; 72us; 28us; 71us; 29us; 73us; 4us; 32768us; 3us; 13us; 7us; 18us; 21us; 12us; 33us; 9us; 4us; 32768us; 3us; 13us; 7us; 18us; 21us; 12us; 33us; 9us; 0us; 16389us; 7us; 32768us; 1us; 56us; 2us; 57us; 10us; 28us; 25us; 53us; 30us; 64us; 32us; 36us; 33us; 32us; 5us; 32768us; 8us; 20us; 26us; 70us; 27us; 72us; 28us; 71us; 29us; 73us; 4us; 32768us; 3us; 13us; 7us; 18us; 21us; 12us; 33us; 9us; 0us; 16390us; 4us; 32768us; 10us; 27us; 25us; 53us; 32us; 36us; 33us; 32us; 5us; 32768us; 13us; 24us; 22us; 49us; 23us; 50us; 24us; 51us; 25us; 52us; 1us; 32768us; 20us; 25us; 4us; 32768us; 10us; 27us; 25us; 53us; 32us; 36us; 33us; 32us; 4us; 16391us; 22us; 49us; 23us; 50us; 24us; 51us; 25us; 52us; 4us; 32768us; 10us; 27us; 25us; 53us; 32us; 36us; 33us; 32us; 7us; 32768us; 1us; 56us; 2us; 57us; 10us; 28us; 25us; 53us; 30us; 64us; 32us; 36us; 33us; 32us; 5us; 32768us; 11us; 31us; 22us; 49us; 23us; 50us; 24us; 51us; 25us; 52us; 11us; 32768us; 11us; 31us; 14us; 58us; 15us; 59us; 16us; 60us; 17us; 61us; 18us; 62us; 19us; 63us; 22us; 49us; 23us; 50us; 24us; 51us; 25us; 52us; 0us; 16392us; 1us; 16394us; 12us; 33us; 4us; 32768us; 10us; 27us; 25us; 53us; 32us; 36us; 33us; 32us; 5us; 32768us; 13us; 35us; 22us; 49us; 23us; 50us; 24us; 51us; 25us; 52us; 0us; 16393us; 0us; 16395us; 2us; 16396us; 23us; 50us; 24us; 51us; 0us; 16397us; 0us; 16398us; 2us; 16399us; 23us; 50us; 24us; 51us; 0us; 16400us; 10us; 32768us; 14us; 58us; 15us; 59us; 16us; 60us; 17us; 61us; 18us; 62us; 19us; 63us; 22us; 49us; 23us; 50us; 24us; 51us; 25us; 52us; 4us; 16404us; 22us; 49us; 23us; 50us; 24us; 51us; 25us; 52us; 4us; 16405us; 22us; 49us; 23us; 50us; 24us; 51us; 25us; 52us; 4us; 16406us; 22us; 49us; 23us; 50us; 24us; 51us; 25us; 52us; 4us; 16407us; 22us; 49us; 23us; 50us; 24us; 51us; 25us; 52us; 4us; 16408us; 22us; 49us; 23us; 50us; 24us; 51us; 25us; 52us; 4us; 16409us; 22us; 49us; 23us; 50us; 24us; 51us; 25us; 52us; 4us; 32768us; 10us; 27us; 25us; 53us; 32us; 36us; 33us; 32us; 4us; 32768us; 10us; 27us; 25us; 53us; 32us; 36us; 33us; 32us; 4us; 32768us; 10us; 27us; 25us; 53us; 32us; 36us; 33us; 32us; 4us; 32768us; 10us; 27us; 25us; 53us; 32us; 36us; 33us; 32us; 4us; 32768us; 10us; 27us; 25us; 53us; 32us; 36us; 33us; 32us; 5us; 32768us; 11us; 55us; 26us; 70us; 27us; 72us; 28us; 71us; 29us; 73us; 0us; 16401us; 0us; 16402us; 0us; 16403us; 4us; 32768us; 10us; 27us; 25us; 53us; 32us; 36us; 33us; 32us; 4us; 32768us; 10us; 27us; 25us; 53us; 32us; 36us; 33us; 32us; 4us; 32768us; 10us; 27us; 25us; 53us; 32us; 36us; 33us; 32us; 4us; 32768us; 10us; 27us; 25us; 53us; 32us; 36us; 33us; 32us; 4us; 32768us; 10us; 27us; 25us; 53us; 32us; 36us; 33us; 32us; 4us; 32768us; 10us; 27us; 25us; 53us; 32us; 36us; 33us; 32us; 7us; 32768us; 1us; 56us; 2us; 57us; 10us; 28us; 25us; 53us; 30us; 64us; 32us; 36us; 33us; 32us; 0us; 16410us; 0us; 16411us; 0us; 16412us; 0us; 16413us; 0us; 16414us; 7us; 32768us; 1us; 56us; 2us; 57us; 10us; 28us; 25us; 53us; 30us; 64us; 32us; 36us; 33us; 32us; 7us; 32768us; 1us; 56us; 2us; 57us; 10us; 28us; 25us; 53us; 30us; 64us; 32us; 36us; 33us; 32us; 7us; 32768us; 1us; 56us; 2us; 57us; 10us; 28us; 25us; 53us; 30us; 64us; 32us; 36us; 33us; 32us; 7us; 32768us; 1us; 56us; 2us; 57us; 10us; 28us; 25us; 53us; 30us; 64us; 32us; 36us; 33us; 32us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 5us; 6us; 9us; 10us; 12us; 15us; 18us; 21us; 26us; 29us; 34us; 39us; 40us; 48us; 54us; 59us; 64us; 65us; 73us; 79us; 84us; 85us; 90us; 96us; 98us; 103us; 108us; 113us; 121us; 127us; 139us; 140us; 142us; 147us; 153us; 154us; 155us; 158us; 159us; 160us; 163us; 164us; 175us; 180us; 185us; 190us; 195us; 200us; 205us; 210us; 215us; 220us; 225us; 230us; 236us; 237us; 238us; 239us; 244us; 249us; 254us; 259us; 264us; 269us; 277us; 278us; 279us; 280us; 281us; 282us; 290us; 298us; 306us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 3us; 3us; 1us; 7us; 5us; 6us; 3us; 4us; 1us; 1us; 3us; 3us; 3us; 3us; 2us; 3us; 1us; 1us; 3us; 3us; 3us; 3us; 3us; 3us; 2us; 3us; 3us; 3us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16388us; 65535us; 65535us; 65535us; 65535us; 16389us; 65535us; 65535us; 65535us; 16390us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16392us; 65535us; 65535us; 65535us; 16393us; 16395us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16401us; 16402us; 16403us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; |]
let _fsyacc_reductions ()  =    [| 
# 301 ".\ExtWParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Statement list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 310 ".\ExtWParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'command)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 29 ".\ExtWParser.fsp"
                                              _1
                   )
# 29 ".\ExtWParser.fsp"
                 : Statement list));
# 321 ".\ExtWParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'command)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'command)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 ".\ExtWParser.fsp"
                                                   _1 @ _3 
                   )
# 32 ".\ExtWParser.fsp"
                 : 'command));
# 333 ".\ExtWParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'aexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 33 ".\ExtWParser.fsp"
                                              vartemp.Add(Var _1); [{commandAST = AssignCommand(Var(_1), _3); s_type = S_VarAssignment}] 
                   )
# 33 ".\ExtWParser.fsp"
                 : 'command));
# 345 ".\ExtWParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 ".\ExtWParser.fsp"
                                      [{commandAST = SkipCommand; s_type = S_Skip}] 
                   )
# 34 ".\ExtWParser.fsp"
                 : 'command));
# 355 ".\ExtWParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'bexp)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'command)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'command)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 ".\ExtWParser.fsp"
                                                              [{commandAST = BoolCommand(_2); s_type = S_IfBool}] @ _4 @ [{commandAST = BoolCommand(NotExpr(_2)); s_type = S_IfElse}] @ _6 @ [{commandAST = SkipCommand; s_type = S_IfFi}] 
                   )
# 35 ".\ExtWParser.fsp"
                 : 'command));
# 368 ".\ExtWParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'bexp)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'command)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 ".\ExtWParser.fsp"
                                                     [{commandAST = BoolCommand(_2); s_type = S_DoBool}] @ _4 @ [{commandAST = BoolCommand(NotExpr(_2)); s_type = S_DoOd}] 
                   )
# 36 ".\ExtWParser.fsp"
                 : 'command));
# 380 ".\ExtWParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'aexp)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'aexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 ".\ExtWParser.fsp"
                                                               arrtemp.Add(Var _1); [{commandAST = ArrAssignCommand(Var(_1), _3, _6); s_type = S_ArrAssignment}] 
                   )
# 37 ".\ExtWParser.fsp"
                 : 'command));
# 393 ".\ExtWParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'aexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 ".\ExtWParser.fsp"
                                                               _2 
                   )
# 40 ".\ExtWParser.fsp"
                 : 'aexp));
# 404 ".\ExtWParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'aexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 ".\ExtWParser.fsp"
                                                               arrtemp.Add(Var _1); ArrExpr(Var _1, _3) 
                   )
# 41 ".\ExtWParser.fsp"
                 : 'aexp));
# 416 ".\ExtWParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 ".\ExtWParser.fsp"
                                     vartemp.Add(Var _1); VarExpr(Var _1) 
                   )
# 42 ".\ExtWParser.fsp"
                 : 'aexp));
# 427 ".\ExtWParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 ".\ExtWParser.fsp"
                                     NumExpr(_1) 
                   )
# 43 ".\ExtWParser.fsp"
                 : 'aexp));
# 438 ".\ExtWParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'aexp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'aexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 ".\ExtWParser.fsp"
                                                               SumExpr(_1, _3) 
                   )
# 44 ".\ExtWParser.fsp"
                 : 'aexp));
# 450 ".\ExtWParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'aexp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'aexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 ".\ExtWParser.fsp"
                                                               MultExpr(_1, _3) 
                   )
# 45 ".\ExtWParser.fsp"
                 : 'aexp));
# 462 ".\ExtWParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'aexp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'aexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 ".\ExtWParser.fsp"
                                                               DivExpr(_1, _3) 
                   )
# 46 ".\ExtWParser.fsp"
                 : 'aexp));
# 474 ".\ExtWParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'aexp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'aexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 ".\ExtWParser.fsp"
                                                               MinExpr(_1,_3) 
                   )
# 47 ".\ExtWParser.fsp"
                 : 'aexp));
# 486 ".\ExtWParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'aexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 ".\ExtWParser.fsp"
                                                         UMinExpr(_2) 
                   )
# 48 ".\ExtWParser.fsp"
                 : 'aexp));
# 497 ".\ExtWParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'bexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 ".\ExtWParser.fsp"
                                                               _2 
                   )
# 51 ".\ExtWParser.fsp"
                 : 'bexp));
# 508 ".\ExtWParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 ".\ExtWParser.fsp"
                                      TrueExpr 
                   )
# 52 ".\ExtWParser.fsp"
                 : 'bexp));
# 518 ".\ExtWParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 ".\ExtWParser.fsp"
                                       FalseExpr 
                   )
# 53 ".\ExtWParser.fsp"
                 : 'bexp));
# 528 ".\ExtWParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'aexp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'aexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 ".\ExtWParser.fsp"
                                                               LargerExpr(_1,_3) 
                   )
# 54 ".\ExtWParser.fsp"
                 : 'bexp));
# 540 ".\ExtWParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'aexp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'aexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 ".\ExtWParser.fsp"
                                                               LargerEqExpr(_1,_3) 
                   )
# 55 ".\ExtWParser.fsp"
                 : 'bexp));
# 552 ".\ExtWParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'aexp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'aexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 ".\ExtWParser.fsp"
                                                               SmallerExpr(_1,_3) 
                   )
# 56 ".\ExtWParser.fsp"
                 : 'bexp));
# 564 ".\ExtWParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'aexp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'aexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 ".\ExtWParser.fsp"
                                                               SmallerEqExpr(_1,_3) 
                   )
# 57 ".\ExtWParser.fsp"
                 : 'bexp));
# 576 ".\ExtWParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'aexp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'aexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 ".\ExtWParser.fsp"
                                                               EqExpr(_1,_3) 
                   )
# 58 ".\ExtWParser.fsp"
                 : 'bexp));
# 588 ".\ExtWParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'aexp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'aexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 ".\ExtWParser.fsp"
                                                               NEqExpr(_1,_3) 
                   )
# 59 ".\ExtWParser.fsp"
                 : 'bexp));
# 600 ".\ExtWParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'bexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 ".\ExtWParser.fsp"
                                         NotExpr(_2) 
                   )
# 60 ".\ExtWParser.fsp"
                 : 'bexp));
# 611 ".\ExtWParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bexp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 ".\ExtWParser.fsp"
                                             AndExpr(_1,_3) 
                   )
# 61 ".\ExtWParser.fsp"
                 : 'bexp));
# 623 ".\ExtWParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bexp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 ".\ExtWParser.fsp"
                                             SAndExpr(_1,_3) 
                   )
# 62 ".\ExtWParser.fsp"
                 : 'bexp));
# 635 ".\ExtWParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bexp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 ".\ExtWParser.fsp"
                                            OrExpr(_1,_3) 
                   )
# 63 ".\ExtWParser.fsp"
                 : 'bexp));
# 647 ".\ExtWParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bexp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 ".\ExtWParser.fsp"
                                             SOrExpr(_1,_3) 
                   )
# 64 ".\ExtWParser.fsp"
                 : 'bexp));
|]
# 660 ".\ExtWParser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 37;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : Statement list =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
