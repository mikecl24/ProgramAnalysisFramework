{
module MetaLLexer

open System
open MetaLParser
open Microsoft.FSharp.Text.Lexing
open System.Text

}

let char        = ['a'-'z' 'A'-'Z']
let upper       = ['A'-'Z']
let digit       = ['0'-'9']
let whitespace  = [' ' '\t']
let newline     = "\n\r" | '\n' | '\r'
let name        = upper (char|digit|'_')*

rule tokenize = parse
| whitespace    { tokenize lexbuf }
| newline       { lexbuf.EndPos <- lexbuf.EndPos.NextLine; tokenize lexbuf; }
| 'P'           { POWERSET }
| '|'           { GOP }
| '!'           { GRAPH }
| '('           { LBRA }
| ')'           { RBRA }
| "->"          { TFS }
| "*"           { CART }
| "VAR"         { VARSET }
| "ARR"         { ARRSET }
| "Q"           { QSET }
| "INT"         { INTSET } 
| "STR"         { STRSET }
| '['           { LSQ }
| ']'           { RSQ }
| 'U'           { UNION }
| '{'           { LCURL }
| '}'           { RCURL }
| ';'           { SCOL }
| name			{ let str = LexBuffer<_>.LexemeString lexbuf in ELEM(str) }
| eof           { EOF }