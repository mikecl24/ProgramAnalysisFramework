{
module ExtWLexer

open System
open ExtWParser
open Microsoft.FSharp.Text.Lexing
open System.Text

}

let char        = ['a'-'z' 'A'-'Z']
let digit       = ['0'-'9']
let whitespace  = [' ' '\t']
let newline     = "\n\r" | '\n' | '\r'
let name        = char(char|digit)*
let num 		= "0"|(['1'-'9'](digit)*)
let opbu		= '!'
let lpar        = "("
let rpar        = ")"
let lbrack      = "["
let rbrack      = "]"

rule tokenize = parse
| whitespace    { tokenize lexbuf }
| newline       { lexbuf.EndPos <- lexbuf.EndPos.NextLine; tokenize lexbuf; }
| ":="			{ ASSIGN }
| "skip"        { SKIP }
| "true"		{ TRUE }
| "false"		{ FALSE }
| "if"			{ IF }
| "fi"			{ FI }
| "then"		{ THEN }
| "else"		{ ELSE }
| "while"		{ WHILE }
| "do"			{ DO }
| "od"			{ OD }
| ";"			{ COMMA }
| "+"           { PLUS }
| "*"           { MULT }
| "/"           { DIV }
| "-"           { MINUS }
| "&&"          { AND }
| "||"          { OR }
| "&"           { SAND }
| "|"           { SOR }
| "!"           { NOT }
| '>'           { GT }
| ">="          { GTEQ }
| '<'           { LT }
| "<="          { LTEQ }
| '='           { EQ }
| "<>"          { NEQ }
| name          { let str = LexBuffer<_>.LexemeString lexbuf in VAR(str) }
| num			{ NUM(int (LexBuffer<_>.LexemeString lexbuf)) }
| lpar          { LPAR }
| rpar          { RPAR }
| lbrack        { LBRA }
| rbrack        { RBRA }
| eof           { EOF }