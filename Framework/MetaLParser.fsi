// Signature file for parser generated by fsyacc
module MetaLParser
type token = 
  | GRAPH
  | INTSET
  | STRSET
  | GOP
  | POWERSET
  | LBRA
  | RBRA
  | TFS
  | CART
  | VARSET
  | ARRSET
  | QSET
  | LSQ
  | RSQ
  | UNION
  | LCURL
  | RCURL
  | SCOL
  | EOF
  | ELEM of (string)
type tokenId = 
    | TOKEN_GRAPH
    | TOKEN_INTSET
    | TOKEN_STRSET
    | TOKEN_GOP
    | TOKEN_POWERSET
    | TOKEN_LBRA
    | TOKEN_RBRA
    | TOKEN_TFS
    | TOKEN_CART
    | TOKEN_VARSET
    | TOKEN_ARRSET
    | TOKEN_QSET
    | TOKEN_LSQ
    | TOKEN_RSQ
    | TOKEN_UNION
    | TOKEN_LCURL
    | TOKEN_RCURL
    | TOKEN_SCOL
    | TOKEN_EOF
    | TOKEN_ELEM
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_dom
    | NONTERM_domainM
    | NONTERM_dinst
    | NONTERM_set
    | NONTERM_elist
    | NONTERM_domainG
    | NONTERM_iset
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> (domain) 
