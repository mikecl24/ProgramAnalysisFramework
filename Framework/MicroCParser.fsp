%{
open System
open System.Collections.Generic
open Types
let mutable vartemp = new List<string>()
%}

%token <string> VAR
%token <int> NUM
%token EOF
%token ASSIGN SKIP PLUS MULT DIV MINUS AND OR SAND SOR NOT
%token GT GTEQ LT LTEQ EQ NEQ
%token COMMA TRUE FALSE IF FI THEN ELSE WHILE DO OD LPAR RPAR LBRA RBRA

%left PLUS MINUS
%left MULT DIV
%left UMINUS

%left AND OR SAND SOR
%left NOT

// start
%start start
%type <Statement list> start

%%

start: command EOF						{$1}

command: 
| command COMMA command					{ $1 @ $3 }
| VAR ASSIGN aexp						{ vartemp.Add($1); [{commandAST = AssignCommand($1, $3); s_type = S_VarAssignment}] }
| SKIP									{ [{commandAST = SkipCommand; s_type = S_Skip}] }
| IF bexp THEN command ELSE command	FI	{ [{commandAST = BoolCommand($2); s_type = S_IfBool}] @ $4 @ [{commandAST = BoolCommand(NotExpr($2)); s_type = S_IfElse}] @ $6 @ [{commandAST = SkipCommand; s_type = S_IfFi}] }
| WHILE bexp DO command OD				{ [{commandAST = BoolCommand($2); s_type = S_DoBool}] @ $4 @ [{commandAST = BoolCommand(NotExpr($2)); s_type = S_DoOd}] }
| VAR LBRA aexp RBRA ASSIGN aexp        { vartemp.Add($1); [{commandAST = ArrAssignCommand($1, $3, $6); s_type = S_ArrAssignment}] }
 
aexp:
| LPAR aexp RPAR                        { $2 }
| VAR LBRA aexp RBRA                    { ArrExpr($1, $3) }
| VAR									{ vartemp.Add($1); VarExpr($1) }
| NUM									{ NumExpr($1) }
| aexp PLUS aexp                        { SumExpr($1, $3) }
| aexp MULT aexp                        { MultExpr($1, $3) }
| aexp DIV aexp                         { DivExpr($1, $3) }
| aexp MINUS aexp                       { MinExpr($1,$3) }
| MINUS aexp		       %prec UMINUS	{ UMinExpr($2) }

bexp:
| LPAR bexp RPAR                        { $2 }
| TRUE									{ TrueExpr }
| FALSE									{ FalseExpr }
| aexp GT aexp                          { LargerExpr($1,$3) }
| aexp GTEQ aexp                        { LargerEqExpr($1,$3) }
| aexp LT aexp                          { SmallerExpr($1,$3) }
| aexp LTEQ aexp                        { SmallerEqExpr($1,$3) }
| aexp EQ aexp                          { EqExpr($1,$3) }
| aexp NEQ aexp                         { NEqExpr($1,$3) }
| NOT bexp								{ NotExpr($2) }
| bexp AND bexp							{ AndExpr($1,$3) }
| bexp SAND bexp						{ SAndExpr($1,$3) }
| bexp OR bexp							{ OrExpr($1,$3) }
| bexp SOR bexp							{ SOrExpr($1,$3) }

%%