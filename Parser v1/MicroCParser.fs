// Implementation file for parser generated by fsyacc
module MicroCParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 ".\MicroCParser.fsp"

type statement =
    { text : string;
    typeNr : int}

# 12 ".\MicroCParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | COMMA
  | TRUE
  | FALSE
  | IF
  | FI
  | THEN
  | ELSE
  | WHILE
  | DO
  | OD
  | LPAR
  | RPAR
  | LBRA
  | RBRA
  | ASSIGN
  | SKIP
  | EOF
  | OPB of (string)
  | OPBU of (string)
  | OPBA of (string)
  | OPAU of (string)
  | OPA of (string)
  | NUM of (string)
  | VAR of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_COMMA
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_IF
    | TOKEN_FI
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_WHILE
    | TOKEN_DO
    | TOKEN_OD
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_LBRA
    | TOKEN_RBRA
    | TOKEN_ASSIGN
    | TOKEN_SKIP
    | TOKEN_EOF
    | TOKEN_OPB
    | TOKEN_OPBU
    | TOKEN_OPBA
    | TOKEN_OPAU
    | TOKEN_OPA
    | TOKEN_NUM
    | TOKEN_VAR
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_command
    | NONTERM_aexp
    | NONTERM_bexp

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | COMMA  -> 0 
  | TRUE  -> 1 
  | FALSE  -> 2 
  | IF  -> 3 
  | FI  -> 4 
  | THEN  -> 5 
  | ELSE  -> 6 
  | WHILE  -> 7 
  | DO  -> 8 
  | OD  -> 9 
  | LPAR  -> 10 
  | RPAR  -> 11 
  | LBRA  -> 12 
  | RBRA  -> 13 
  | ASSIGN  -> 14 
  | SKIP  -> 15 
  | EOF  -> 16 
  | OPB _ -> 17 
  | OPBU _ -> 18 
  | OPBA _ -> 19 
  | OPAU _ -> 20 
  | OPA _ -> 21 
  | NUM _ -> 22 
  | VAR _ -> 23 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_COMMA 
  | 1 -> TOKEN_TRUE 
  | 2 -> TOKEN_FALSE 
  | 3 -> TOKEN_IF 
  | 4 -> TOKEN_FI 
  | 5 -> TOKEN_THEN 
  | 6 -> TOKEN_ELSE 
  | 7 -> TOKEN_WHILE 
  | 8 -> TOKEN_DO 
  | 9 -> TOKEN_OD 
  | 10 -> TOKEN_LPAR 
  | 11 -> TOKEN_RPAR 
  | 12 -> TOKEN_LBRA 
  | 13 -> TOKEN_RBRA 
  | 14 -> TOKEN_ASSIGN 
  | 15 -> TOKEN_SKIP 
  | 16 -> TOKEN_EOF 
  | 17 -> TOKEN_OPB 
  | 18 -> TOKEN_OPBU 
  | 19 -> TOKEN_OPBA 
  | 20 -> TOKEN_OPAU 
  | 21 -> TOKEN_OPA 
  | 22 -> TOKEN_NUM 
  | 23 -> TOKEN_VAR 
  | 26 -> TOKEN_end_of_input
  | 24 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_command 
    | 3 -> NONTERM_command 
    | 4 -> NONTERM_command 
    | 5 -> NONTERM_command 
    | 6 -> NONTERM_command 
    | 7 -> NONTERM_command 
    | 8 -> NONTERM_aexp 
    | 9 -> NONTERM_aexp 
    | 10 -> NONTERM_aexp 
    | 11 -> NONTERM_aexp 
    | 12 -> NONTERM_aexp 
    | 13 -> NONTERM_aexp 
    | 14 -> NONTERM_aexp 
    | 15 -> NONTERM_bexp 
    | 16 -> NONTERM_bexp 
    | 17 -> NONTERM_bexp 
    | 18 -> NONTERM_bexp 
    | 19 -> NONTERM_bexp 
    | 20 -> NONTERM_bexp 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 26 
let _fsyacc_tagOfErrorTerminal = 24

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | COMMA  -> "COMMA" 
  | TRUE  -> "TRUE" 
  | FALSE  -> "FALSE" 
  | IF  -> "IF" 
  | FI  -> "FI" 
  | THEN  -> "THEN" 
  | ELSE  -> "ELSE" 
  | WHILE  -> "WHILE" 
  | DO  -> "DO" 
  | OD  -> "OD" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | LBRA  -> "LBRA" 
  | RBRA  -> "RBRA" 
  | ASSIGN  -> "ASSIGN" 
  | SKIP  -> "SKIP" 
  | EOF  -> "EOF" 
  | OPB _ -> "OPB" 
  | OPBU _ -> "OPBU" 
  | OPBA _ -> "OPBA" 
  | OPAU _ -> "OPAU" 
  | OPA _ -> "OPA" 
  | NUM _ -> "NUM" 
  | VAR _ -> "VAR" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | COMMA  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | FI  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | DO  -> (null : System.Object) 
  | OD  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | LBRA  -> (null : System.Object) 
  | RBRA  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | SKIP  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | OPB _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OPBU _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OPBA _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OPAU _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OPA _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | VAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 5us; 65535us; 0us; 2us; 8us; 4us; 15us; 5us; 16us; 6us; 20us; 7us; 14us; 65535us; 10us; 11us; 13us; 40us; 18us; 40us; 22us; 23us; 25us; 26us; 27us; 29us; 28us; 30us; 33us; 34us; 42us; 37us; 43us; 38us; 44us; 39us; 49us; 41us; 50us; 40us; 53us; 40us; 5us; 65535us; 13us; 14us; 18us; 19us; 28us; 45us; 50us; 51us; 53us; 52us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 9us; 24us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 2us; 1us; 2us; 1us; 1us; 2us; 2us; 2us; 2us; 2us; 5us; 2us; 2us; 5us; 2us; 2us; 6us; 1us; 2us; 2us; 3us; 7us; 1us; 3us; 3us; 3us; 12us; 13us; 1us; 4us; 1us; 5us; 2us; 5us; 20us; 1us; 5us; 1us; 5us; 1us; 5us; 1us; 6us; 2us; 6us; 20us; 1us; 6us; 1us; 6us; 1us; 7us; 3us; 7us; 12us; 13us; 1us; 7us; 1us; 7us; 3us; 7us; 12us; 13us; 1us; 8us; 2us; 8us; 15us; 3us; 8us; 12us; 13us; 4us; 8us; 12us; 13us; 18us; 1us; 8us; 2us; 9us; 10us; 1us; 9us; 3us; 9us; 12us; 13us; 1us; 9us; 1us; 11us; 3us; 12us; 12us; 13us; 3us; 12us; 13us; 13us; 3us; 12us; 13us; 14us; 3us; 12us; 13us; 18us; 3us; 12us; 13us; 18us; 1us; 12us; 1us; 13us; 1us; 14us; 2us; 15us; 20us; 1us; 15us; 1us; 16us; 1us; 17us; 1us; 18us; 1us; 19us; 2us; 19us; 20us; 2us; 20us; 20us; 1us; 20us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 7us; 9us; 12us; 15us; 18us; 21us; 23us; 26us; 28us; 32us; 34us; 36us; 39us; 41us; 43us; 45us; 47us; 50us; 52us; 54us; 56us; 60us; 62us; 64us; 68us; 70us; 73us; 77us; 82us; 84us; 87us; 89us; 93us; 95us; 97us; 101us; 105us; 109us; 113us; 117us; 119us; 121us; 123us; 126us; 128us; 130us; 132us; 134us; 136us; 139us; 142us; |]
let _fsyacc_action_rows = 54
let _fsyacc_actionTableElements = [|4us; 32768us; 3us; 13us; 7us; 18us; 15us; 12us; 23us; 9us; 0us; 49152us; 2us; 32768us; 0us; 8us; 16us; 3us; 0us; 16385us; 1us; 16386us; 0us; 8us; 2us; 32768us; 0us; 8us; 6us; 16us; 2us; 32768us; 0us; 8us; 4us; 17us; 2us; 32768us; 0us; 8us; 9us; 21us; 4us; 32768us; 3us; 13us; 7us; 18us; 15us; 12us; 23us; 9us; 2us; 32768us; 12us; 22us; 14us; 10us; 4us; 32768us; 10us; 27us; 20us; 44us; 22us; 36us; 23us; 32us; 2us; 16387us; 20us; 43us; 21us; 42us; 0us; 16388us; 7us; 32768us; 1us; 47us; 2us; 48us; 10us; 28us; 18us; 50us; 20us; 44us; 22us; 36us; 23us; 32us; 2us; 32768us; 5us; 15us; 17us; 53us; 4us; 32768us; 3us; 13us; 7us; 18us; 15us; 12us; 23us; 9us; 4us; 32768us; 3us; 13us; 7us; 18us; 15us; 12us; 23us; 9us; 0us; 16389us; 7us; 32768us; 1us; 47us; 2us; 48us; 10us; 28us; 18us; 50us; 20us; 44us; 22us; 36us; 23us; 32us; 2us; 32768us; 8us; 20us; 17us; 53us; 4us; 32768us; 3us; 13us; 7us; 18us; 15us; 12us; 23us; 9us; 0us; 16390us; 4us; 32768us; 10us; 27us; 20us; 44us; 22us; 36us; 23us; 32us; 3us; 32768us; 13us; 24us; 20us; 43us; 21us; 42us; 1us; 32768us; 14us; 25us; 4us; 32768us; 10us; 27us; 20us; 44us; 22us; 36us; 23us; 32us; 2us; 16391us; 20us; 43us; 21us; 42us; 4us; 32768us; 10us; 27us; 20us; 44us; 22us; 36us; 23us; 32us; 7us; 32768us; 1us; 47us; 2us; 48us; 10us; 28us; 18us; 50us; 20us; 44us; 22us; 36us; 23us; 32us; 3us; 32768us; 11us; 31us; 20us; 43us; 21us; 42us; 4us; 32768us; 11us; 31us; 19us; 49us; 20us; 43us; 21us; 42us; 0us; 16392us; 1us; 16394us; 12us; 33us; 4us; 32768us; 10us; 27us; 20us; 44us; 22us; 36us; 23us; 32us; 3us; 32768us; 13us; 35us; 20us; 43us; 21us; 42us; 0us; 16393us; 0us; 16395us; 1us; 16396us; 20us; 43us; 2us; 16397us; 20us; 43us; 21us; 42us; 2us; 16398us; 20us; 43us; 21us; 42us; 3us; 32768us; 19us; 49us; 20us; 43us; 21us; 42us; 2us; 16402us; 20us; 43us; 21us; 42us; 4us; 32768us; 10us; 27us; 20us; 44us; 22us; 36us; 23us; 32us; 4us; 32768us; 10us; 27us; 20us; 44us; 22us; 36us; 23us; 32us; 4us; 32768us; 10us; 27us; 20us; 44us; 22us; 36us; 23us; 32us; 2us; 32768us; 11us; 46us; 17us; 53us; 0us; 16399us; 0us; 16400us; 0us; 16401us; 4us; 32768us; 10us; 27us; 20us; 44us; 22us; 36us; 23us; 32us; 7us; 32768us; 1us; 47us; 2us; 48us; 10us; 28us; 18us; 50us; 20us; 44us; 22us; 36us; 23us; 32us; 1us; 16403us; 17us; 53us; 1us; 16404us; 17us; 53us; 7us; 32768us; 1us; 47us; 2us; 48us; 10us; 28us; 18us; 50us; 20us; 44us; 22us; 36us; 23us; 32us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 5us; 6us; 9us; 10us; 12us; 15us; 18us; 21us; 26us; 29us; 34us; 37us; 38us; 46us; 49us; 54us; 59us; 60us; 68us; 71us; 76us; 77us; 82us; 86us; 88us; 93us; 96us; 101us; 109us; 113us; 118us; 119us; 121us; 126us; 130us; 131us; 132us; 134us; 137us; 140us; 144us; 147us; 152us; 157us; 162us; 165us; 166us; 167us; 168us; 173us; 181us; 183us; 185us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 3us; 3us; 1us; 7us; 5us; 6us; 3us; 4us; 1us; 1us; 3us; 3us; 2us; 3us; 1us; 1us; 3us; 2us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 4us; 4us; 4us; 4us; 4us; 4us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16388us; 65535us; 65535us; 65535us; 65535us; 16389us; 65535us; 65535us; 65535us; 16390us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16392us; 65535us; 65535us; 65535us; 16393us; 16395us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16399us; 16400us; 16401us; 65535us; 65535us; 65535us; 65535us; 65535us; |]
let _fsyacc_reductions ()  =    [| 
# 229 ".\MicroCParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : statement list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 238 ".\MicroCParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'command)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 25 ".\MicroCParser.fsp"
                                              _1
                   )
# 25 ".\MicroCParser.fsp"
                 : statement list));
# 249 ".\MicroCParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'command)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'command)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 28 ".\MicroCParser.fsp"
                                                   _1 @ _3 
                   )
# 28 ".\MicroCParser.fsp"
                 : 'command));
# 261 ".\MicroCParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'aexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 29 ".\MicroCParser.fsp"
                                              [{text = _1+":="+_3; typeNr = 1}] 
                   )
# 29 ".\MicroCParser.fsp"
                 : 'command));
# 273 ".\MicroCParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 30 ".\MicroCParser.fsp"
                                      [{text = "skip"; typeNr = 2}] 
                   )
# 30 ".\MicroCParser.fsp"
                 : 'command));
# 283 ".\MicroCParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'bexp)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'command)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'command)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 31 ".\MicroCParser.fsp"
                                                              [{text = _2; typeNr = 3}] @ _4 @ [{text = "!("+_2+")"; typeNr = 4}] @ _6 @ [{text = "FI"; typeNr = 5}] 
                   )
# 31 ".\MicroCParser.fsp"
                 : 'command));
# 296 ".\MicroCParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'bexp)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'command)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 ".\MicroCParser.fsp"
                                                     [{text = _2; typeNr = 6}] @ _4 @ [{text = "!("+_2+")"; typeNr = 7}] 
                   )
# 32 ".\MicroCParser.fsp"
                 : 'command));
# 308 ".\MicroCParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'aexp)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'aexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 33 ".\MicroCParser.fsp"
                                                               [{text = _1+"["+_3+"]"+":="+_6; typeNr = 8}] 
                   )
# 33 ".\MicroCParser.fsp"
                 : 'command));
# 321 ".\MicroCParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'aexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 ".\MicroCParser.fsp"
                                                               "("+_2+")"
                   )
# 36 ".\MicroCParser.fsp"
                 : 'aexp));
# 332 ".\MicroCParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'aexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 ".\MicroCParser.fsp"
                                                               _1+"["+_3+"]" 
                   )
# 37 ".\MicroCParser.fsp"
                 : 'aexp));
# 344 ".\MicroCParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 ".\MicroCParser.fsp"
                                     _1 
                   )
# 38 ".\MicroCParser.fsp"
                 : 'aexp));
# 355 ".\MicroCParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 ".\MicroCParser.fsp"
                                     _1 
                   )
# 39 ".\MicroCParser.fsp"
                 : 'aexp));
# 366 ".\MicroCParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'aexp)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'aexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 ".\MicroCParser.fsp"
                                             _1+_2+_3 
                   )
# 40 ".\MicroCParser.fsp"
                 : 'aexp));
# 379 ".\MicroCParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'aexp)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'aexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 ".\MicroCParser.fsp"
                                             _1+_2+_3 
                   )
# 41 ".\MicroCParser.fsp"
                 : 'aexp));
# 392 ".\MicroCParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'aexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 ".\MicroCParser.fsp"
                                          _1+_2 
                   )
# 42 ".\MicroCParser.fsp"
                 : 'aexp));
# 404 ".\MicroCParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'bexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 ".\MicroCParser.fsp"
                                                               "("+_2+")" 
                   )
# 45 ".\MicroCParser.fsp"
                 : 'bexp));
# 415 ".\MicroCParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 ".\MicroCParser.fsp"
                                      "true" 
                   )
# 46 ".\MicroCParser.fsp"
                 : 'bexp));
# 425 ".\MicroCParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 ".\MicroCParser.fsp"
                                       "false" 
                   )
# 47 ".\MicroCParser.fsp"
                 : 'bexp));
# 435 ".\MicroCParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'aexp)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'aexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 ".\MicroCParser.fsp"
                                             _1+_2+_3 
                   )
# 48 ".\MicroCParser.fsp"
                 : 'bexp));
# 448 ".\MicroCParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'bexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 ".\MicroCParser.fsp"
                                          _1+_2 
                   )
# 49 ".\MicroCParser.fsp"
                 : 'bexp));
# 460 ".\MicroCParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bexp)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bexp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 ".\MicroCParser.fsp"
                                             _1+_2+_3 
                   )
# 50 ".\MicroCParser.fsp"
                 : 'bexp));
|]
# 474 ".\MicroCParser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 27;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : statement list =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
